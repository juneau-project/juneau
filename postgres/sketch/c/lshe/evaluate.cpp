extern "C"
{
#include "postgres.h"
}

#include <cstdint>
#include "evaluate.h"
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <set>

using namespace std;

// each hash array has l groups, each group has k * hash_value_size bytes
// num_hash = l * k
bool evaluate_func(Datum *c_hash, Datum *q_hash, int k, int opt_k, int opt_l)
{
  int hash_value_size = 8;
  int prefix_size = opt_k * hash_value_size;
  int interval = k * hash_value_size;
  // elog(WARNING, "c_hash %u, %u, %u", DatumGetInt16(c_hash[0]), DatumGetInt16(c_hash[1]), DatumGetInt16(c_hash[2]));
  // elog(WARNING, "q_hash %u, %u, %u", DatumGetInt16(q_hash[0]), DatumGetInt16(q_hash[1]), DatumGetInt16(q_hash[2]));
  for (int i = 0; i < opt_l; i++) {
    for (int j = 0; j < prefix_size; j++) {
      // elog(WARNING, "c_hash[%d][%d]=%d", len);
      // elog(WARNING, "c_hash[%d][%d]=%d", len);
      // cout << q_hash[j + i * interval] << endl;
      // cout << c_hash[j + i * interval] << endl;
      int q_num = DatumGetInt16(q_hash[j + i * interval]);
      int c_num = DatumGetInt16(c_hash[j + i * interval]);
      // if (q_hash[j + i * interval] != c_hash[j + i * interval]) {
      //   return false;
      // }
      if (q_num != c_num) {
        return false;
      }
    }
  }

  // cout << "hello" << endl;

  return true;
}

int binarySearch(vector<string> &arr, int l, int r, string s, int prefix_size)
{
  while (l <= r)
  {
    int m = l + (r - l) / 2;

    if (arr[m].substr(0, prefix_size) == s) return m;
    else if (arr[m].substr(0, prefix_size) < s) l = m + 1;
    else r = m - 1;
  }
  
  return -1;
}

set<int> query(char *s1, char *q_hash1, int len, int len2, int opt_k)
{
  // binary search the string
  string s = string(s1, s1 + len);
  string q_hash = string(q_hash1, q_hash1+len2);

  // elog(WARNING, "length of s is %d", len);
  // elog(WARNING, "length of q_hash is %d", len2);

  vector<string> words;
  istringstream ss(s);
  string tmp;

  set<int> result;

  while (getline(ss, tmp, '!'))
  {
    words.push_back(tmp);
  }

  // elog(WARNING, "size of the vector is %lu", words.size());

  int hash_value_size = 8;
  int prefix_size = opt_k * hash_value_size;

  int idx = binarySearch(words, 0, words.size() - 1,  q_hash, prefix_size);


  // elog(WARNING, "BSEARCH index is %d", idx);

  if (idx != -1) {
    result.insert(idx);

    for (int i = idx + 1; i < words.size(); i++) {
      if (words[i].substr(0, prefix_size) == q_hash) {
        // append i to result
        result.insert(i);
      } else {
        break;
      }
    }
  }

  return result;
}

// int main()
// {
//   query();
//   vector<string> s = { "hello", "world", "i", "am", "peter" };

//   sort(s.begin(), s.end());

//   for (auto it : s) {
//     cout << it << " ";
//   }

//   cout << "\n";

//   int idx = binarySearch(s, 0, s.size() - 1, "am", 0);
//   cout << idx << endl;

//   cout << string("hello").substr(0, 2) << endl;
// }

// int main()
// {
//   // uint8_t c_hash[] = {163,41,179,37,122,118,78,7,33,168,233,232,200,217,132,202,111,11,32,172,22,61,187,141,189,110,86,111,100,160,241,80,11,210,140,50,178,3,40,20,89,53,195,245,0,103,94,215,167,152,249,184,78,202,148,154,245,251,47,124,156,45,203,93,67,95,102,63,234,144,1,33,145,194,156,2,56,244,55,228,223,37,211,197,134,87,110,167,45,137,9,137,212,186,164,106,123,236,63,76,34,30,219,45,201,79,118,15,112,129,17,241,23,179,172,210,190,228,71,180,101,22,227,149,12,72,126,119,179,121,25,89,90,171,180,58,1,221,79,28,168,14,235,253,79,64,134,223,246,113,33,193,157,163,188,162,68,213,87,132,235,6,243,101,146,56,142,71,57,106,41,41,224,155,196,10,135,205,95,236,46,255,250,205,213,48,150,175,124,98,49,145,35,148,204,114,202,197,103,84,113,247,2,54,24,41,158,23,191,90,57,249,102,140,212,218,13,190,111,188,180,239,10,158,91,33,166,127,2,83,65,97,169,132,220,66,80,182,119,36,247,231,18,6,158,25,174,231,69,75,73,201,236,124,228,170,147,174,127,140,58,224,26,110,225,17,182,79,136,67,81,49,47,117,236,18,214,166,135,244,125,216,34,214,36,10,190,183,203,59,89,153,114,109,244,122,25,159,143,92,192,208,42,62,103,2,198,31,14,52,97,1,181,101,252,226,92,151,151,196,3,201,50,166,170,250,205,135,81,44,105,105,248,93,4,75,159,143,159,44,70,193,58,14,237,242,213,239,148,36,113,209,59,86,12,179,226,135,167,148,137,185,66,118,48,235,221,87,215,28,121,57,126,78,20,27,37,128,175,252,204,177,74,222,115,227,229,191,26,21,129,161,193,70,28,131,104,120,183,100,15,170,82,70,182,219,237,39,93,13,137,9,4,63,36,235,171,112,191,204,82,162,90,174,249,211,245,143,160,5,145,113,71,55,44,83,238,104,199,52,149,154,98,22,60,204,253,247,227,253,152,217,138,47,52,187,49,97,207,156,216,146,106,126,127,196,5,96,38,246,160,65,205,39,60,35,116,89,215,4,27,139,114,230,194,188,13,200,105,238,168,169,16,32,68,139,183,81,223,108,94,131,122,78,5,181,21,48,172,230,176,17};
//   // uint8_t q_hash[] = {43,107,14,144,224,121,78,7,4,14,67,172,100,218,61,68,88,139,104,116,176,202,120,57,158,156,86,111,140,11,28,177,216,55,228,165,50,82,103,6,16,24,228,118,44,8,100,223,72,248,227,71,18,26,162,176,225,219,17,92,244,167,203,93,26,226,102,63,98,167,148,114,40,2,76,59,104,116,64,26,17,200,87,50,216,4,111,167,185,147,140,241,212,249,129,1,171,71,156,147,88,57,248,244,165,239,73,188,56,67,13,52,175,67,233,161,188,80,165,171,46,16,228,149,160,57,31,61,108,179,115,96,250,245,87,3,118,119,68,61,88,87,39,59,34,173,83,10,110,172,210,105,46,90,102,93,108,49,209,181,170,85,244,101,202,131,28,118,1,107,101,212,236,191,54,100,24,113,242,62,220,74,224,45,181,209,216,214,76,152,178,165,55,105,91,23,84,172,97,98,177,97,53,65,28,67,58,93,168,124,225,155,196,108,97,4,224,92,225,108,48,39,69,191,140,4,1,87,144,168,197,64,233,191,156,88,124,166,121,36,34,185,32,14,252,68,27,176,212,88,164,20,224,230,148,137,58,201,129,140,154,171,195,130,38,179,205,248,184,246,154,96,239,58,78,187,64,247,108,86,29,174,96,218,64,87,25,49,67,191,1,28,248,217,142,118,70,92,36,169,8,252,28,59,122,143,50,138,176,188,176,150,148,57,173,99,236,210,63,181,243,73,217,155,164,253,228,210,59,206,69,217,12,26,7,75,40,128,223,171,232,27,65,150,215,193,145,28,60,234,224,188,202,60,15,179,144,147,205,226,39,36,146,161,48,113,3,124,39,56,157,29,62,250,187,231,64,225,222,192,92,209,94,41,105,173,10,152,196,247,31,85,1,197,144,121,232,208,215,186,231,13,250,128,46,107,168,21,238,101,210,157,96,10,177,169,91,38,97,159,160,248,17,238,6,105,50,141,24,212,132,230,7,207,163,154,8,109,206,140,1,122,210,93,52,118,1,248,90,176,156,217,208,123,21,231,49,194,217,96,216,34,49,152,89,19,111,70,106,42,99,237,14,96,13,32,116,192,56,114,207,223,171,88,122,98,225,129,169,118,190,149,128,78,88,47,188,191,230,102,50,82,47,89,110,222,25,48,220,212,92,57};

//   uint8_t c_hash[] = {163, 0, 0};
//   uint8_t q_hash[] = {43, 0, 0};

//   cout << evaluate_func(c_hash, q_hash, 4, 4, 1) << endl;
// }