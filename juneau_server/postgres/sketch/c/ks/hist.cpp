extern "C"
{
#include "postgres.h"
}

#include <limits>
#include <algorithm>
#include <cstdint>
#include <iostream>
#include <string>
#include <unordered_map>
#include <map>
#include "hist.h"

// for testing only
// #include <unordered_set>

using namespace std;

int cmp_func_int(const void *a, const void *b)
{
  return (*(int64_t *)a - *(int64_t *)b);
}

// Datum *hist <--> int64_t *hist
void construct_hist_int(int64_t *arr, Datum *hist, int len, int elem_num)
{
  // pass 1: sort the array in one pass
  // pass 2: pass the array to record the occurrences
  qsort(arr, len, sizeof(int64_t), cmp_func_int);

  int h_idx = 0;

  for (int i = 0; i < len; i++)
  {
    if (i == 0) {
      hist[h_idx] = arr[i];
      hist[h_idx + elem_num] = 1;
      continue;
    }

    if (i > 0 && arr[i] == hist[h_idx]) {
      // same element as the last
      hist[h_idx + elem_num] ++;
    } else {
      // diff element as the last
      hist[++h_idx] = arr[i];

      // carry forward the last #occurrences
      hist[h_idx + elem_num] = hist[h_idx + elem_num - 1] + 1;
    }
  }
}

// Datum *hist <--> int64_t *hist
void construct_hist_int_special(unordered_map<int64_t, int> m, Datum *hist)
{
  int elem_num = m.size();
  map<int64_t, int> ordered(m.begin(), m.end());

  int idx = 0;
  for (auto it = ordered.begin(); it != ordered.end(); ++it)
  {
    hist[idx] = it->first;

    if (idx == 0) {
      hist[idx + elem_num] = it->second;
    } else {
      hist[idx + elem_num] = it->second + hist[idx + elem_num - 1];
    }

    idx++;
  }
}

// int main()
// {
//   // int64_t arr[] = {48, 55, 39, 81, 43, 36, 14, 71, 38, 64, 51, 93, 41, 57, 11, 8, 53, 100, 54, 70, 30, 9, 61, 99, 85, 78, 9, 1, 43, 81, 36, 22, 69, 15, 10, 80, 55, 17, 19, 81, 44, 1, 39, 33, 67, 94, 80, 32, 78, 77, 43, 87, 36, 2, 13, 25, 32, 80, 8, 58, 39, 87, 13, 31, 4, 1, 17, 88, 98, 67, 86, 78, 43, 54, 71, 90, 91, 77, 10, 36, 87, 76, 75, 100, 18, 31, 66, 23, 71, 57, 33, 45, 36, 38, 26, 8, 23, 20, 71, 99, 94, 10, 76, 58, 30, 8, 20, 30, 2, 86, 26, 36, 13, 25, 5, 58, 63, 83, 93, 12, 27, 14, 80, 3, 7, 57, 73, 19, 10, 46, 38, 21, 80, 77, 80, 6, 64, 19, 74, 71, 78, 57, 77, 71, 70, 67, 14, 60, 54, 2, 56, 38, 21, 38, 39, 77, 50, 70, 38, 83, 59, 70, 64, 4, 56, 63, 17, 31, 58, 48, 81, 61, 22, 59, 21, 59, 86, 16, 100, 13, 63, 56, 64, 54, 61, 57, 41, 36, 68, 95, 61, 36, 35, 92, 46, 3, 77, 91, 32, 36, 39, 64, 82, 86, 45, 81, 95, 13, 13, 28, 18, 73, 85, 33, 83, 4, 59, 84, 41, 84, 76, 84, 44, 81, 14, 69, 73, 85, 7, 90, 51, 86, 78, 8, 90, 99, 10, 62, 10, 43, 90, 10, 61, 41, 5, 84, 81, 95, 74, 92, 15, 83, 32, 95, 4, 5, 20, 58, 75, 54, 75, 73, 34, 84, 10, 13, 94, 24, 23, 75, 3, 26, 24, 100, 89, 94, 32, 74, 12, 97, 55, 21, 85, 99, 83, 8, 1, 11, 91, 10, 49, 22, 21, 14, 98, 51, 44, 18, 18, 12, 78, 68, 98, 10, 26, 33, 43, 40, 67, 29, 85, 56, 11, 72, 97, 91, 98, 16, 53, 35, 94, 23, 83, 6, 91, 26, 90, 31, 76, 68, 41, 15, 75, 6, 23, 20, 44, 42, 86, 41, 41, 63, 68, 87, 11, 99, 9, 69, 19, 60, 96, 71, 21, 91, 66, 64, 22, 75, 68, 98, 90, 94, 85, 55, 76, 79, 40, 7, 93, 62, 58, 51, 96, 81, 31, 19, 3, 56, 26, 79, 79, 93, 70, 36, 76, 83, 62, 78, 12, 92, 36, 43, 33, 34, 66, 61, 20, 85, 71, 70, 60, 46, 11, 40, 88, 91, 48, 63, 95, 96, 50, 94, 85, 36, 43, 32, 43, 49, 50, 79, 10, 27, 77, 41, 44, 83, 62, 27, 64, 51, 66, 84, 31, 15, 59, 46, 65, 13, 64, 40, 93, 6, 82, 12, 8, 16, 24, 70, 9, 71, 25, 25, 78, 76, 16, 91, 69, 74, 85, 37, 81, 42, 49, 50, 85, 31, 57, 94, 50, 92, 97, 46, 44, 6, 37, 39, 50, 7, 43, 31, 94, 34, 30, 45, 12, 7, 38, 7, 90, 46, 98, 30, 29, 38, 77, 18, 76, 49, 75, 90, 66, 13, 53, 11, 48, 58, 98, 58, 12, 23, 39, 40, 10, 92, 78, 58, 86, 61, 86, 54, 1, 8, 31, 57, 100, 81, 52, 78, 69, 35, 48, 31, 76, 20, 34, 46, 18, 11, 91, 72, 50, 95, 97, 32, 49, 62, 67, 44, 44, 85, 50, 79, 100, 32, 85, 43, 39, 47, 81, 17, 98, 32, 40, 37, 81, 58, 36, 100, 78, 91, 44, 20, 72, 61, 45, 20, 92, 32, 81, 82, 62, 55, 100, 33, 57, 40, 9, 96, 18, 24, 63, 2, 4, 89, 55, 5, 51, 34, 100, 71, 89, 78, 32, 81, 100, 50, 74, 72, 11, 51, 46, 60, 41, 46, 94, 64, 38, 11, 10, 99, 34, 65, 68, 35, 55, 92, 40, 60, 66, 66, 72, 54, 99, 61, 98, 89, 30, 62, 63, 24, 76, 36, 37, 48, 2, 92, 19, 77, 12, 14, 7, 71, 79, 83, 86, 24, 24, 5, 97, 28, 28, 76, 63, 15, 9, 9, 83, 87, 69, 85, 78, 4, 94, 19, 33, 98, 66, 81, 13, 71, 5, 28, 17, 86, 28, 90, 84, 82, 73, 52, 34, 28, 41, 14, 40, 92, 99, 33, 60, 46, 98, 58, 65, 45, 95, 37, 93, 62, 93, 88, 36, 17, 22, 28, 100, 3, 84, 17, 87, 55, 52, 5, 33, 35, 94, 12, 39, 41, 25, 6, 37, 66, 10, 75, 86, 10, 20, 73, 48, 17, 55, 20, 86, 23, 47, 23, 51, 9, 48, 60, 91, 34, 82, 75, 26, 54, 91, 3, 30, 48, 3, 74, 28, 15, 42, 90, 19, 5, 11, 80, 58, 86, 40, 33, 66, 86, 47, 87, 1, 94, 95, 66, 72, 71, 81, 94, 22, 27, 52, 33, 43, 20, 45, 31, 73, 40, 56, 73, 18, 97, 98, 3, 46, 44, 92, 58, 100, 98, 100, 32, 4, 34, 52, 83, 3, 27, 40, 18, 75, 75, 13, 26, 36, 94, 5, 56, 77, 82, 36, 55, 31, 56, 10, 32, 50, 47, 80, 45, 68, 1, 59, 63, 28, 12, 23, 68, 88, 16, 85, 30, 100, 94, 2, 59, 64, 46, 54, 44, 27, 70, 77, 77, 59, 67, 38, 40, 29, 66, 26, 95, 97, 47, 40, 4, 45, 74, 97, 46, 95, 16, 43, 56, 79, 72, 46, 7, 33, 16, 65, 34, 11, 32, 8, 46, 45, 74, 38, 68, 72, 48, 61, 10, 47, 91, 69, 36, 35, 71, 6, 69, 16, 74, 64, 22, 86, 31, 83, 54, 66, 2, 33, 19, 55, 45, 4, 28, 28, 12, 91, 43, 79, 73, 92, 84, 37, 1, 92, 29, 100, 92, 92, 54, 81, 55, 57, 91, 57, 20, 87, 30, 81, 94, 8, 75, 65, 79, 41, 58, 97, 37, 46, 68, 40, 73, 80, 50, 82, 32, 49, 39, 16, 96, 96, 93, 42, 39, 11, 54, 14, 29, 19, 99, 73, 20, 22, 95, 54, 46, 97, 67, 55, 34, 66, 40, 51, 65, 46, 68, 12, 47};
//   // int len = 1000;
//   // int64_t arr[] = {19104, 19105, 19106, 19107, 21013};
//   // int len = 5;
//   int num_digits = 0;
  
//   int64_t arr[] = {0, 0, 0, 0, 0, 0, 0, 0, 1};
//   int len = 9;
//   // int64_t arr[] = {1, 1, 1, 1, 1, 1, 1, 1, 2, 3};
//   // int len = 10;

//   // ------------------

//   unordered_set<int64_t> s;
//   bool special = false;

//   // cout << "hello" << endl;

//   for (int i = 0; i < len; i++)
//   {
    
//     s.insert(arr[i]);
//   }

//   cout << s.size() << endl;

//   if (s.size() > 1000)
//   {
//     special = true;
//   }

//   // cout << "hello" << endl;

//   if (special) {
//     unordered_map<int64_t, int> m;

//     if (num_digits == 0) {
//       // default is to keep the first 3 digits
//       num_digits = 3;
//     }

//     int64_t ten_pow = int64_t(round(pow(10, num_digits)));

//     for (int i = 0; i < len; i++) {
//       if (arr[i] > ten_pow) {
//         int digits = int(log10(arr[i]) + 1);
//         m[floor(arr[i] / pow(10, digits - num_digits)) * pow(10, digits - num_digits)]++;
//       } else {
//         m[arr[i]]++;
//       }
//     }

//     int64_t *hist = (int64_t *)malloc(sizeof(int64_t) * (2 * m.size()));
    
//     for (int i = 0; i < 2 * m.size(); i++){
//       hist[i] = 0;
//     }

//     construct_hist_int_special(m, hist);

//     for (int i = 0; i < 2 * m.size(); i++){
//       cout << hist[i] << ", ";
//     }

//   } else {
//     // case 1: <= 1000 unique values
//     int64_t *hist = (int64_t *)malloc(sizeof(int64_t) * 2 * s.size());

//     for (int i = 0; i < len; i++)
//     {
//       hist[i] = 0;
//     }

//     construct_hist_int(arr, hist, len, s.size());

//     cout << endl;
//     for (int i = 0; i < 2 * s.size(); i++) {
//       cout << hist[i] << ", ";
//     }
//   }

//   cout << endl;

//   return 0;
// }